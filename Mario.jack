/** Implements a mario. */
class Mario {

   field int x, y; // screen location of mario
   field int size; // length of this mario, in pixels
   field int time; // time for the mario to jump
   field int score;

   /** Constructs a new mario with a given location and size. */
   constructor Mario new(int Ax, int Ay, int Asize) {
      /* Prints some text using the standard library. */
      let score = 0;
      do Output.println();      // New line
      do Output.printString("  Score:");
      do Output.printInt(score);
      let x = Ax;
      let y = Ay;
      let size = Asize;
      let score = 0;
      do draw();
      return this;
   }

   /** Disposes this mario. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws the mario on the screen. */
   method void draw() {
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

   /** Erases the mario from the screen. */
   method void erase() {
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

    /** Increments the mario size by 2 pixels. */
   method void incSize() {
      if (((y + size) < 254) & ((x + size) < 510)) {
         do erase();
         let size = size + 2;
         do draw();
      }
      return;
   }

   /** Decrements the mario size by 2 pixels. */
   method void decSize() {
      if (size > 2) {
         do erase();
         let size = size - 2;
         do draw();
      }
      return;
   }

   /** Moves the mario up by 2 pixels. */
   method void Jump() {
      let time = 0;
      while (time < 29) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
         let y = y - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + size, y + 1);
         let time = time + 1;
         do Sys.wait(time + 2);
      }
      if(x>95){
         if(x<150){
         do Output.moveCursor(0, 0);
         let score = score + 30;
         do Output.println();      // New line
         do Output.printString("  Score:");
         do Output.printInt(score);
         do Screen.setColor(true);
         do Screen.drawRectangle(125, 120, 125 + size, 120 + size);
         }
      }
      if(x>372){
         if(x<427){
         do Output.moveCursor(0, 0);
         let score = score + 30;
         do Output.println();      // New line
         do Output.printString("  Score:");
         do Output.printInt(score);
         do Screen.setColor(true);
         do Screen.drawRectangle(402, 120, 402 + size, 120 + size);
         }
      }
      let time = 29;
      while (time > 0) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + size, y + 1);
         let y = y + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
         let time = time - 1;
         do Sys.wait(time + 2);
      }
      return;
   }


   /** Moves the mario left by 2 pixels. */
   method void moveLeft() {
      if (x > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
         let x = x - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + 1, y + size);
      }
      return;
   }

   /** Moves the mario right by 2 pixels. */
   method void moveRight() {
      if ((x + size) < 510) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + 1, y + size);
         let x = x + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
      }
      return;
   }
}
